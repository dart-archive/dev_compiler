dart_library.library('language/compile_time_constant_a_test', null, /* Imports */[
  'dart_sdk',
  'expect'
], function load__compile_time_constant_a_test(exports, dart_sdk, expect) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const expect$ = expect.expect;
  const compile_time_constant_a_test = Object.create(null);
  let MapOfString$int = () => (MapOfString$int = dart.constFn(core.Map$(core.String, core.int)))();
  let JSArrayOfString = () => (JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))();
  let JSArrayOfint = () => (JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))();
  let dynamicTobool = () => (dynamicTobool = dart.constFn(dart.definiteFunctionType(core.bool, [dart.dynamic])))();
  let StringAndintTovoid = () => (StringAndintTovoid = dart.constFn(dart.definiteFunctionType(dart.void, [core.String, core.int])))();
  let VoidToint = () => (VoidToint = dart.constFn(dart.definiteFunctionType(core.int, [])))();
  let VoidTovoid = () => (VoidTovoid = dart.constFn(dart.definiteFunctionType(dart.void, [])))();
  let dynamicAnddynamicTovoid = () => (dynamicAnddynamicTovoid = dart.constFn(dart.definiteFunctionType(dart.void, [dart.dynamic, dart.dynamic])))();
  let VoidTodynamic = () => (VoidTodynamic = dart.constFn(dart.definiteFunctionType(dart.dynamic, [])))();
  compile_time_constant_a_test.m1 = dart.const(dart.map({a: 400 + 99}, core.String, core.int));
  compile_time_constant_a_test.m2 = dart.const(dart.map({a: 499, b: 42}, core.String, core.int));
  compile_time_constant_a_test.m3 = dart.const(dart.map({m1: compile_time_constant_a_test.m1, m2: compile_time_constant_a_test.m2}, core.String, MapOfString$int()));
  compile_time_constant_a_test.m4 = dart.const(dart.map({z: 9, a: 8, m: 7}, core.String, core.int));
  compile_time_constant_a_test.m5 = dart.const(dart.map({'': 499}, core.String, core.int));
  compile_time_constant_a_test.m6 = dart.const(dart.map({a: 499}, core.String, core.int));
  compile_time_constant_a_test.m7 = dart.const(dart.map());
  compile_time_constant_a_test.isUnsupportedError = function(o) {
    return core.UnsupportedError.is(o);
  };
  dart.fn(compile_time_constant_a_test.isUnsupportedError, dynamicTobool());
  compile_time_constant_a_test.main = function() {
    expect$.Expect.equals(499, compile_time_constant_a_test.m1[dartx.get]('a'));
    expect$.Expect.equals(null, compile_time_constant_a_test.m1[dartx.get]('b'));
    expect$.Expect.listEquals(JSArrayOfString().of(['a']), compile_time_constant_a_test.m1[dartx.keys][dartx.toList]());
    expect$.Expect.listEquals(JSArrayOfint().of([499]), compile_time_constant_a_test.m1[dartx.values][dartx.toList]());
    expect$.Expect.isTrue(compile_time_constant_a_test.m1[dartx.containsKey]('a'));
    expect$.Expect.isFalse(compile_time_constant_a_test.m1[dartx.containsKey]('toString'));
    expect$.Expect.isTrue(compile_time_constant_a_test.m1[dartx.containsValue](499));
    expect$.Expect.isFalse(compile_time_constant_a_test.m1[dartx.containsValue](42));
    expect$.Expect.isFalse(compile_time_constant_a_test.m1[dartx.containsValue](null));
    let seenKeys = [];
    let seenValues = [];
    compile_time_constant_a_test.m1[dartx.forEach](dart.fn((key, value) => {
      seenKeys[dartx.add](key);
      seenValues[dartx.add](value);
    }, StringAndintTovoid()));
    expect$.Expect.listEquals(JSArrayOfString().of(['a']), seenKeys);
    expect$.Expect.listEquals(JSArrayOfint().of([499]), seenValues);
    expect$.Expect.isFalse(compile_time_constant_a_test.m1[dartx.isEmpty]);
    expect$.Expect.equals(1, compile_time_constant_a_test.m1[dartx.length]);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m1[dartx.remove]('a'), VoidToint()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m1[dartx.remove]('b'), VoidToint()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m1[dartx.clear](), VoidTovoid()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m1[dartx.set]('b', 42), VoidToint()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m1[dartx.set]('a', 499), VoidToint()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m1[dartx.putIfAbsent]('a', dart.fn(() => 499, VoidToint())), VoidToint()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m1[dartx.putIfAbsent]('z', dart.fn(() => 499, VoidToint())), VoidToint()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.equals(499, compile_time_constant_a_test.m2[dartx.get]('a'));
    expect$.Expect.equals(42, compile_time_constant_a_test.m2[dartx.get]('b'));
    expect$.Expect.equals(null, compile_time_constant_a_test.m2[dartx.get]('c'));
    expect$.Expect.listEquals(JSArrayOfString().of(['a', 'b']), compile_time_constant_a_test.m2[dartx.keys][dartx.toList]());
    expect$.Expect.listEquals(JSArrayOfint().of([499, 42]), compile_time_constant_a_test.m2[dartx.values][dartx.toList]());
    expect$.Expect.isTrue(compile_time_constant_a_test.m2[dartx.containsKey]('a'));
    expect$.Expect.isTrue(compile_time_constant_a_test.m2[dartx.containsKey]('b'));
    expect$.Expect.isFalse(compile_time_constant_a_test.m2[dartx.containsKey]('toString'));
    expect$.Expect.isTrue(compile_time_constant_a_test.m2[dartx.containsValue](499));
    expect$.Expect.isTrue(compile_time_constant_a_test.m2[dartx.containsValue](42));
    expect$.Expect.isFalse(compile_time_constant_a_test.m2[dartx.containsValue](99));
    expect$.Expect.isFalse(compile_time_constant_a_test.m2[dartx.containsValue](null));
    seenKeys = [];
    seenValues = [];
    compile_time_constant_a_test.m2[dartx.forEach](dart.fn((key, value) => {
      seenKeys[dartx.add](key);
      seenValues[dartx.add](value);
    }, StringAndintTovoid()));
    expect$.Expect.listEquals(JSArrayOfString().of(['a', 'b']), seenKeys);
    expect$.Expect.listEquals(JSArrayOfint().of([499, 42]), seenValues);
    expect$.Expect.isFalse(compile_time_constant_a_test.m2[dartx.isEmpty]);
    expect$.Expect.equals(2, compile_time_constant_a_test.m2[dartx.length]);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m2[dartx.remove]('a'), VoidToint()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m2[dartx.remove]('b'), VoidToint()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m2[dartx.remove]('c'), VoidToint()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m2[dartx.clear](), VoidTovoid()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m2[dartx.set]('a', 499), VoidToint()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m2[dartx.set]('b', 42), VoidToint()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m2[dartx.set]('c', 499), VoidToint()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m2[dartx.putIfAbsent]('a', dart.fn(() => 499, VoidToint())), VoidToint()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m2[dartx.putIfAbsent]('z', dart.fn(() => 499, VoidToint())), VoidToint()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m2[dartx.set]('a', 499), VoidToint()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.identical(compile_time_constant_a_test.m3[dartx.get]('m1'), compile_time_constant_a_test.m1);
    expect$.Expect.identical(compile_time_constant_a_test.m3[dartx.get]('m2'), compile_time_constant_a_test.m2);
    expect$.Expect.listEquals(JSArrayOfString().of(['z', 'a', 'm']), compile_time_constant_a_test.m4[dartx.keys][dartx.toList]());
    expect$.Expect.listEquals(JSArrayOfint().of([9, 8, 7]), compile_time_constant_a_test.m4[dartx.values][dartx.toList]());
    seenKeys = [];
    seenValues = [];
    compile_time_constant_a_test.m4[dartx.forEach](dart.fn((key, value) => {
      seenKeys[dartx.add](key);
      seenValues[dartx.add](value);
    }, StringAndintTovoid()));
    expect$.Expect.listEquals(JSArrayOfString().of(['z', 'a', 'm']), seenKeys);
    expect$.Expect.listEquals(JSArrayOfint().of([9, 8, 7]), seenValues);
    expect$.Expect.equals(499, compile_time_constant_a_test.m5[dartx.get](''));
    expect$.Expect.isTrue(compile_time_constant_a_test.m5[dartx.containsKey](''));
    expect$.Expect.equals(1, compile_time_constant_a_test.m5[dartx.length]);
    expect$.Expect.identical(compile_time_constant_a_test.m1, compile_time_constant_a_test.m6);
    expect$.Expect.isTrue(compile_time_constant_a_test.m7[dartx.isEmpty]);
    expect$.Expect.equals(0, compile_time_constant_a_test.m7[dartx.length]);
    expect$.Expect.equals(null, compile_time_constant_a_test.m7[dartx.get]('b'));
    expect$.Expect.listEquals([], compile_time_constant_a_test.m7[dartx.keys][dartx.toList]());
    expect$.Expect.listEquals([], compile_time_constant_a_test.m7[dartx.values][dartx.toList]());
    expect$.Expect.isFalse(compile_time_constant_a_test.m7[dartx.containsKey]('a'));
    expect$.Expect.isFalse(compile_time_constant_a_test.m7[dartx.containsKey]('toString'));
    expect$.Expect.isFalse(compile_time_constant_a_test.m7[dartx.containsValue](499));
    expect$.Expect.isFalse(compile_time_constant_a_test.m7[dartx.containsValue](null));
    seenKeys = [];
    seenValues = [];
    compile_time_constant_a_test.m7[dartx.forEach](dart.fn((key, value) => {
      seenKeys[dartx.add](key);
      seenValues[dartx.add](value);
    }, dynamicAnddynamicTovoid()));
    expect$.Expect.listEquals([], seenKeys);
    expect$.Expect.listEquals([], seenValues);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m7[dartx.remove]('a'), VoidTovoid()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m7[dartx.remove]('b'), VoidTovoid()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m7[dartx.clear](), VoidTovoid()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m7[dartx.set]('b', 42), VoidToint()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m7[dartx.set]('a', 499), VoidToint()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m7[dartx.putIfAbsent]('a', dart.fn(() => 499, VoidToint())), VoidTovoid()), compile_time_constant_a_test.isUnsupportedError);
    expect$.Expect.throws(dart.fn(() => compile_time_constant_a_test.m7[dartx.putIfAbsent]('z', dart.fn(() => 499, VoidToint())), VoidTovoid()), compile_time_constant_a_test.isUnsupportedError);
  };
  dart.fn(compile_time_constant_a_test.main, VoidTodynamic());
  // Exports:
  exports.compile_time_constant_a_test = compile_time_constant_a_test;
});
