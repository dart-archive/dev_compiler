dart_library.library('dart/_js_embedded_names', null, /* Imports */[
  'dart/_runtime'
], /* Lazy imports */[
], function(exports, dart) {
  'use strict';
  let dartx = dart.dartx;
  const DISPATCH_PROPERTY_NAME = "dispatchPropertyName";
  const TYPE_INFORMATION = 'typeInformation';
  const GLOBAL_FUNCTIONS = 'globalFunctions';
  const STATICS = 'statics';
  const INTERCEPTED_NAMES = 'interceptedNames';
  const MANGLED_GLOBAL_NAMES = 'mangledGlobalNames';
  const MANGLED_NAMES = 'mangledNames';
  const LIBRARIES = 'libraries';
  const FINISHED_CLASSES = 'finishedClasses';
  const ALL_CLASSES = 'allClasses';
  const METADATA = 'metadata';
  const INTERCEPTORS_BY_TAG = 'interceptorsByTag';
  const LEAF_TAGS = 'leafTags';
  const LAZIES = 'lazies';
  const GET_ISOLATE_TAG = 'getIsolateTag';
  const ISOLATE_TAG = 'isolateTag';
  const CURRENT_SCRIPT = 'currentScript';
  const DEFERRED_LIBRARY_URIS = 'deferredLibraryUris';
  const DEFERRED_LIBRARY_HASHES = 'deferredLibraryHashes';
  const INITIALIZE_LOADED_HUNK = 'initializeLoadedHunk';
  const IS_HUNK_LOADED = 'isHunkLoaded';
  const IS_HUNK_INITIALIZED = 'isHunkInitialized';
  const DEFERRED_INITIALIZED = 'deferredInitialized';
  const CLASS_ID_EXTRACTOR = 'classIdExtractor';
  const CLASS_FIELDS_EXTRACTOR = 'classFieldsExtractor';
  const INSTANCE_FROM_CLASS_ID = "instanceFromClassId";
  const INITIALIZE_EMPTY_INSTANCE = "initializeEmptyInstance";
  const TYPEDEF_TYPE_PROPERTY_NAME = "$typedefType";
  const TYPEDEF_PREDICATE_PROPERTY_NAME = "$$isTypedef";
  const NATIVE_SUPERCLASS_TAG_NAME = "$nativeSuperclassTag";
  const MAP_TYPE_TO_INTERCEPTOR = "mapTypeToInterceptor";
  // Exports:
  exports.DISPATCH_PROPERTY_NAME = DISPATCH_PROPERTY_NAME;
  exports.TYPE_INFORMATION = TYPE_INFORMATION;
  exports.GLOBAL_FUNCTIONS = GLOBAL_FUNCTIONS;
  exports.STATICS = STATICS;
  exports.INTERCEPTED_NAMES = INTERCEPTED_NAMES;
  exports.MANGLED_GLOBAL_NAMES = MANGLED_GLOBAL_NAMES;
  exports.MANGLED_NAMES = MANGLED_NAMES;
  exports.LIBRARIES = LIBRARIES;
  exports.FINISHED_CLASSES = FINISHED_CLASSES;
  exports.ALL_CLASSES = ALL_CLASSES;
  exports.METADATA = METADATA;
  exports.INTERCEPTORS_BY_TAG = INTERCEPTORS_BY_TAG;
  exports.LEAF_TAGS = LEAF_TAGS;
  exports.LAZIES = LAZIES;
  exports.GET_ISOLATE_TAG = GET_ISOLATE_TAG;
  exports.ISOLATE_TAG = ISOLATE_TAG;
  exports.CURRENT_SCRIPT = CURRENT_SCRIPT;
  exports.DEFERRED_LIBRARY_URIS = DEFERRED_LIBRARY_URIS;
  exports.DEFERRED_LIBRARY_HASHES = DEFERRED_LIBRARY_HASHES;
  exports.INITIALIZE_LOADED_HUNK = INITIALIZE_LOADED_HUNK;
  exports.IS_HUNK_LOADED = IS_HUNK_LOADED;
  exports.IS_HUNK_INITIALIZED = IS_HUNK_INITIALIZED;
  exports.DEFERRED_INITIALIZED = DEFERRED_INITIALIZED;
  exports.CLASS_ID_EXTRACTOR = CLASS_ID_EXTRACTOR;
  exports.CLASS_FIELDS_EXTRACTOR = CLASS_FIELDS_EXTRACTOR;
  exports.INSTANCE_FROM_CLASS_ID = INSTANCE_FROM_CLASS_ID;
  exports.INITIALIZE_EMPTY_INSTANCE = INITIALIZE_EMPTY_INSTANCE;
  exports.TYPEDEF_TYPE_PROPERTY_NAME = TYPEDEF_TYPE_PROPERTY_NAME;
  exports.TYPEDEF_PREDICATE_PROPERTY_NAME = TYPEDEF_PREDICATE_PROPERTY_NAME;
  exports.NATIVE_SUPERCLASS_TAG_NAME = NATIVE_SUPERCLASS_TAG_NAME;
  exports.MAP_TYPE_TO_INTERCEPTOR = MAP_TYPE_TO_INTERCEPTOR;
});
